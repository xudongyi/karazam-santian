<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- MySQL数据库配置 -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <property name="minIdle" value="${druid.minIdle}" />
        <property name="maxActive" value="${druid.maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxOpenPreparedStatements}" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}" />
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.use_outer_join">true</prop>
                <prop key="hibernate.jdbc.fetch_size">30</prop>
                <prop key="hibernate.jdbc.batch_size">30</prop>
                <prop key="hibernate.jdbc.batch_versioned_data">true</prop>
                <!-- 开启二级缓存 -->
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <!-- 开启查询缓存 -->
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <!-- 高速缓存提供程序 -->
                <!--<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.SingletonEhCacheProvider</prop>-->
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory</prop>
                <prop key="net.sf.ehcache.configurationResourceName">ehcache-hibernate.xml</prop>
                <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate5.SpringSessionContext</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="javax.persistence.validation.mode">none</prop>
                <!-- hibernate.id.new_generator_mappings参数设置：MySQL和SQL Server为false，Oracle为true -->
                <prop key="hibernate.id.new_generator_mappings">false</prop>
            </props>
        </property>
        <property name="dataSource" ref="dataSource" />
        <property name="physicalNamingStrategy">
            <bean class="com.klzan.core.persist.hibernate.ImprovedNamingStrategy" />
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.klzan.p2p.model</value>
            </list>
        </property>
    </bean>

    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <bean id="sqlSessionFactory" class="com.klzan.core.persist.mybatis.MySqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage" value="com.klzan.p2p.model" />
        <property name="plugins">
            <array>
                <bean class="com.klzan.core.persist.mybatis.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                            rowBoundsWithCount=true
                            reasonable=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
        <property name="mapperLocations" value="classpath*:mybatis/*/*.xml"></property>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
    </bean>

    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.klzan.p2p.mapper"/>
        <!-- 3.2.2版本新特性，markerInterface可以起到mappers配置的作用，详细情况需要看Marker接口类 -->
        <!--<property name="markerInterface" value="com.klzan.core.persist.mybatis.MyMapper"/>-->
        <property name="properties">
            <value>
                mappers=com.klzan.core.persist.mybatis.MyMapper
            </value>
        </property>
    </bean>

    <bean id="myDaoSupport" class="com.klzan.core.persist.mybatis.MyDaoSupportImpl" />

    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <!-- 事务注解 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    <!-- 事务管理属性 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="select*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="cal*" propagation="REQUIRED" read-only="true" />
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="edit*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="merge*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="apply*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="create*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="persist*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="lend*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="transfer*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="generate*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="execute*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="process*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="*Success" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="*Failure" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="before*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="after*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="notice*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>

    <!-- 配置切面 -->
    <aop:config expose-proxy="true" proxy-target-class="true">
        <aop:advisor advice-ref="transactionAdvice" pointcut="execution(* com.klzan.p2p.service..*.*(..)) || execution(* com.klzan.plugin.pay.common..*.*(..))"/>
    </aop:config>
</beans>